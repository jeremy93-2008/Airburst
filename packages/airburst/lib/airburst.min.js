'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var express = _interopDefault(require('express'));
var sha256 = _interopDefault(require('crypto-js/sha256'));
var fs = _interopDefault(require('fs'));
var Path = _interopDefault(require('path'));
var knex = _interopDefault(require('knex'));
var graphql = _interopDefault(require('express-graphql'));
var graphql$1 = _interopDefault(require('graphql'));

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter$1(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator$1(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
}

function createTableIfNoExist(db, name, callback) {
    return new Promise(function (resolve, reject) {
        db.schema.hasTable(name).then(function (isExist) {
            if (isExist)
                return resolve("Table already exist");
            db.schema.createTable(name, function (newTable) { return callback(newTable); }).then(function () {
                resolve("Table created");
            });
        });
    });
}
function createColumnsIfNoExist(table, name, column) {
    if (typeof column == "string")
        return addColumnByType(table, name, column);
    var col = addColumnByType(table, name, column.data);
    if (column.type && column.type == "primary") {
        col = col.primary();
    }
    else if (column.type && column.type == "unique") {
        col = col.unique();
    }
    if (column.ref) {
        table.foreign(name).references(column.ref.column).inTable(column.ref.table);
    }
}
function addColumnByType(table, name, type) {
    switch (type) {
        case "increment": return table.increments(name);
        case "boolean": return table.boolean(name);
        case "integer": return table.integer(name);
        case "string": return table.string(name);
        case "text": return table.text(name);
        case "date": return table.date(name);
        case "uinteger": return table.integer(name).unsigned();
        default: return table.string(name);
    }
}

function createNewDatabase(db, databaseJSON) {
    return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, createTableIfNoExist(db, "roles", function (newTable) {
                        newTable.increments("id");
                        newTable.string("name");
                        newTable.string("description");
                        newTable.integer("weight").unsigned();
                    })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, createTableIfNoExist(db, "users", function (newTable) {
                            newTable.increments("id");
                            newTable.string("name");
                            newTable.string("password");
                            newTable.string("description");
                            newTable.integer("role_id").unsigned();
                            newTable.foreign("role_id").references("id").inTable("roles");
                        })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, asyncForEachCustomTables(db, Object.entries(databaseJSON))];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function asyncForEachCustomTables(db, entries) {
    return __awaiter$1(this, void 0, void 0, function () {
        var _loop_1, i;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _loop_1 = function (i) {
                        var _a, key, value;
                        return __generator$1(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _a = entries[i], key = _a[0], value = _a[1];
                                    return [4 /*yield*/, createTableIfNoExist(db, key, function (newTable) {
                                            Object.keys(value).forEach(function (column) {
                                                createColumnsIfNoExist(newTable, column, value[column]);
                                            });
                                        })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < entries.length)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}

function generateSampleDatabase(db, sample) {
    return __awaiter$1(this, void 0, void 0, function () {
        var _this = this;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, populateDefaultSampleData(db)];
                case 1:
                    _a.sent();
                    sample.forEach(function (singleSample) { return __awaiter$1(_this, void 0, void 0, function () {
                        return __generator$1(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, populateCustomSampleData(db, singleSample)];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                    return [2 /*return*/];
            }
        });
    });
}
function populateDefaultSampleData(db) {
    return __awaiter$1(this, void 0, void 0, function () {
        var rolesLength, usersLength;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, db("roles")];
                case 1:
                    rolesLength = (_a.sent()).length;
                    return [4 /*yield*/, db("users")];
                case 2:
                    usersLength = (_a.sent()).length;
                    if (rolesLength == 0) {
                        db("roles").insert([
                            {
                                name: "Administrator",
                                description: "Administrator Role",
                                weight: 4
                            },
                            {
                                name: "Editor",
                                description: "Editor Role",
                                weight: 3
                            },
                            {
                                name: "Moderator",
                                description: "Moderator Role",
                                weight: 2
                            },
                            {
                                name: "User",
                                description: "User Role",
                                weight: 1
                            }
                        ]).then();
                    }
                    if (usersLength == 0) {
                        db("users").insert({
                            name: "admin",
                            password: sha256("admin").toString(),
                            description: "Content Administrator",
                            role_id: 1
                        }).then();
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function populateCustomSampleData(db, sample) {
    return __awaiter$1(this, void 0, void 0, function () {
        var rowLength, data;
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, db(sample.table)];
                case 1:
                    rowLength = (_a.sent()).length;
                    if (rowLength > 0)
                        return [2 /*return*/];
                    data = sample.data.map(function (singleData) {
                        return singleData;
                    });
                    db(sample.table).insert(__spreadArrays(data)).then();
                    return [2 /*return*/];
            }
        });
    });
}

function getTablesName(db, name, driver) {
    return __awaiter$1(this, void 0, void 0, function () {
        return __generator$1(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getSQLTable(db, name, driver)];
                case 1: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function getSQLTable(db, name, driver) {
    return __awaiter$1(this, void 0, void 0, function () {
        var a, _a;
        return __generator$1(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, db.raw("select table_name from information_schema.tables where table_schema = '" + name + "'")];
                case 1:
                    a = _b.sent();
                    _a = driver;
                    switch (_a) {
                        case "mssql": return [3 /*break*/, 2];
                        case "mysql": return [3 /*break*/, 4];
                        case "sqlite3": return [3 /*break*/, 6];
                        case "postgres": return [3 /*break*/, 8];
                        case "oracle": return [3 /*break*/, 10];
                    }
                    return [3 /*break*/, 12];
                case 2: return [4 /*yield*/, db.raw("select table_name from information_schema.tables where table_schema = '" + name + "' and table_catalog = ?")];
                case 3: return [2 /*return*/, (_b.sent())[0]];
                case 4: return [4 /*yield*/, db.raw("select table_name as name from information_schema.tables where table_schema = '" + name + "'")];
                case 5: return [2 /*return*/, (_b.sent())[0]];
                case 6: return [4 /*yield*/, db.raw("SELECT name FROM sqlite_master WHERE type='table';")];
                case 7: return [2 /*return*/, _b.sent()];
                case 8: return [4 /*yield*/, db.raw("select table_name from information_schema.tables where table_schema = '" + name + "' and table_catalog = ?")];
                case 9: return [2 /*return*/, _b.sent()];
                case 10: return [4 /*yield*/, db.raw("select table_name from user_tables")];
                case 11: return [2 /*return*/, _b.sent()];
                case 12: return [2 /*return*/];
            }
        });
    });
}

var dbKnex = null;
var driver = "";
var databaseName = "";
function connectDatabase() {
    var connectionJson = fs.readFileSync(Path.resolve(__dirname, "./config/connection.json"), { encoding: "utf8" });
    var json = JSON.parse(connectionJson);
    var database = json.database;
    driver = database.driver;
    databaseName = database.database;
    /**
     * Client: mssql, mysql, sqlite3, postgres, oracle
     */
    dbKnex = knex({
        client: database.driver,
        version: database.version,
        connection: {
            host: database.host,
            user: database.user,
            password: database.password,
            database: database.database,
            filename: database.filename
        }
    });
    return dbKnex;
}
function loadCustomDatabase() {
    var databaseJson = fs.readFileSync(Path.resolve(__dirname, "./config/database.json"), { encoding: "utf8" });
    var json = JSON.parse(databaseJson);
    return json;
}
function loadSampleData() {
    var sampleJson = fs.readFileSync(Path.resolve(__dirname, "./config/sample.json"), { encoding: "utf8" });
    var json = JSON.parse(sampleJson);
    return json;
}
function initalizeDatabase() {
    return __awaiter(this, void 0, void 0, function () {
        var db;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    db = connectDatabase();
                    return [4 /*yield*/, createNewDatabase(db, loadCustomDatabase())];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, generateSampleDatabase(db, loadSampleData())];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}

var Table = /** @class */ (function () {
    function Table(tableName) {
        this.tableName = tableName;
    }
    Table.prototype.name = function () {
        return this.tableName;
    };
    Table.prototype.columns = function () {
        return __awaiter(this, void 0, void 0, function () {
            var columnsInfo;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!dbKnex)
                            return [2 /*return*/];
                        return [4 /*yield*/, dbKnex(this.tableName).columnInfo()];
                    case 1:
                        columnsInfo = _a.sent();
                        return [2 /*return*/, Object.keys(columnsInfo).map(function (key) { return key; })];
                }
            });
        });
    };
    Table.prototype.rows = function () {
        return __awaiter(this, void 0, void 0, function () {
            var select;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!dbKnex)
                            return [2 /*return*/];
                        return [4 /*yield*/, dbKnex(this.tableName).select("*")];
                    case 1:
                        select = (_a.sent());
                        return [2 /*return*/, select];
                }
            });
        });
    };
    return Table;
}());
function getDataType(currentTable) {
    return __awaiter(this, void 0, void 0, function () {
        var cols, fields;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, currentTable.columns()];
                case 1:
                    cols = _a.sent();
                    fields = {};
                    cols === null || cols === void 0 ? void 0 : cols.forEach(function (name) {
                        fields[name] = {
                            type: graphql$1.GraphQLString
                        };
                    });
                    return [2 /*return*/, new graphql$1.GraphQLObjectType({ name: "Row_" + currentTable.name(), fields: fields })];
            }
        });
    });
}
function getQueryType(tablesName) {
    return __awaiter(this, void 0, void 0, function () {
        var query;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = { name: "Query", fields: {} };
                    return [4 /*yield*/, populateTableNameOnFields(tablesName, query)];
                case 1:
                    _a.sent();
                    return [2 /*return*/, new graphql$1.GraphQLObjectType(query)];
            }
        });
    });
}
function populateTableNameOnFields(tablesName, query) {
    return __awaiter(this, void 0, void 0, function () {
        var _loop_1, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _loop_1 = function (i) {
                        var name_1, currentTable, _a, _b, _c, _d, _e;
                        return __generator(this, function (_f) {
                            switch (_f.label) {
                                case 0:
                                    name_1 = tablesName[i];
                                    currentTable = new Table(name_1);
                                    _a = query.fields;
                                    _b = name_1;
                                    _c = {};
                                    _e = (_d = graphql$1.GraphQLList).bind;
                                    return [4 /*yield*/, getDataType(currentTable)];
                                case 1:
                                    _a[_b] = (_c.type = new (_e.apply(_d, [void 0, _f.sent()]))(),
                                        _c.resolve = function () { return currentTable.rows(); },
                                        _c);
                                    return [2 /*return*/];
                            }
                        });
                    };
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < tablesName.length)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4:
                    return [2 /*return*/];
            }
        });
    });
}
function getScheme(tablesName) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, _b, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    _b = (_a = graphql$1.GraphQLSchema).bind;
                    _c = {};
                    return [4 /*yield*/, getQueryType(tablesName)];
                case 1: return [2 /*return*/, new (_b.apply(_a, [void 0, (_c.query = _d.sent(), _c)]))()];
            }
        });
    });
}

function init() {
    return __awaiter(this, void 0, void 0, function () {
        var tablesName, app, _a, _b, _c, _d, _e;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0: return [4 /*yield*/, initalizeDatabase()];
                case 1:
                    _f.sent();
                    return [4 /*yield*/, getTablesName(dbKnex, databaseName, driver)];
                case 2:
                    tablesName = (_f.sent()).map(function (single) { return single.name; });
                    app = express();
                    //app.use(jwt({ secret: "lol" }).unless({ path: ["/auth"] }));
                    _b = (_a = app).use;
                    _c = ["/api"];
                    _d = graphql;
                    _e = {};
                    return [4 /*yield*/, getScheme(tablesName)];
                case 3:
                    //app.use(jwt({ secret: "lol" }).unless({ path: ["/auth"] }));
                    _b.apply(_a, _c.concat([_d.apply(void 0, [(_e.schema = _f.sent(),
                                _e.graphiql = true,
                                _e)])]));
                    app.listen(3000, function () {
                        console.log("🚀 Listening...");
                    });
                    return [2 /*return*/];
            }
        });
    });
}
/**
 * buildSchema(`
            type Table {
                columns: [String],
                data: [String]
            }
            type Query {
                ${tablesName.map((name) => {
                    return `${name}: Table`;
                })}
            }
        `)
 */
init();
//# sourceMappingURL=airburst.min.js.map

'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var express = _interopDefault(require('express'));
var graphql = require('graphql');
var graphql$1 = _interopDefault(require('express-graphql'));
var knex = _interopDefault(require('knex'));

var database = {
	driver: "mysql",
	version: "8.0.19",
	database: "airburst-api",
	host: "localhost",
	port: "3306",
	user: "root",
	password: "password"
};

var categories = {
	id: {
		type: "primary",
		data: "increment"
	},
	name: "string",
	description: "string"
};
var tags = {
	id: {
		type: "primary",
		data: "increment"
	},
	name: "string",
	description: "string"
};
var tags_ref = {
	id: {
		type: "primary",
		data: "increment"
	},
	id_articleOrPage: "integer",
	id_tag: "integer"
};
var articles = {
	id: {
		type: "primary",
		data: "increment"
	},
	name: "string",
	description: "string",
	content: "text",
	date: "date",
	category: {
		data: "uinteger",
		ref: {
			table: "categories",
			column: "id"
		}
	},
	author: {
		data: "uinteger",
		ref: {
			table: "users",
			column: "id"
		}
	},
	image: "string"
};
var pages = {
	id: {
		type: "primary",
		data: "increment"
	},
	name: "string",
	description: "string",
	content: "text",
	date: "date",
	author: {
		data: "uinteger",
		ref: {
			table: "users",
			column: "id"
		}
	}
};
var menu = {
	id: {
		type: "primary",
		data: "increment"
	},
	title: "string",
	order: "integer",
	page: {
		data: "uinteger",
		ref: {
			table: "pages",
			column: "id"
		}
	},
	article: {
		data: "uinteger",
		ref: {
			table: "articles",
			column: "id"
		}
	}
};
var comments = {
	id: {
		type: "primary",
		data: "increment"
	},
	message: "string",
	comment_id: {
		data: "uinteger",
		ref: {
			table: "comments",
			column: "id"
		}
	},
	article_id: {
		data: "uinteger",
		ref: {
			table: "articles",
			column: "id"
		}
	},
	visibility: "boolean",
	author: {
		data: "uinteger",
		ref: {
			table: "users",
			column: "id"
		}
	}
};
var Database = {
	categories: categories,
	tags: tags,
	tags_ref: tags_ref,
	articles: articles,
	pages: pages,
	menu: menu,
	comments: comments
};

function createCustomTablesIfNotExist(db, trx) {
    var promises = [];
    Object.keys(Database).forEach(function (tableName) {
        db.schema.hasTable(tableName).then(function (isExist) {
            if (isExist)
                return;
            promises.push(db.schema.createTable(tableName, function (newTable) {
                createColumnIfNotExist(newTable, tableName);
            }).then());
        });
    });
    Promise.all(promises).then(function () {
        trx.commit();
    });
    return db;
}
function createColumnIfNotExist(newTable, key) {
    var table = Database[key];
    Object.keys(table).forEach(function (columnName) {
        var column = table[columnName];
        if (typeof column == "string") {
            createColumnType(newTable, columnName, column);
            return;
        }
        if (column.ref && column.ref.table && column.ref.column) {
            newTable.foreign(columnName).references(column.ref.column).inTable(column.ref.table);
        }
        var columnBuilder = createColumnType(newTable, columnName, column.data);
        if (!columnBuilder)
            return;
        if (column.type && column.type == "primary") {
            columnBuilder = columnBuilder.primary("pk" + columnName);
        }
    });
}
function createColumnType(newTable, columnName, type) {
    switch (type) {
        case "integer": return newTable.integer(columnName);
        case "uinteger": return newTable.integer(columnName).unsigned();
        case "string": return newTable.string(columnName);
        case "text": return newTable.text(columnName);
        case "increment": return newTable.increments(columnName);
        case "boolean": return newTable.boolean(columnName);
        case "date": return newTable.date(columnName);
    }
}
function createTablesIfNotExist(db) {
    db.transaction(function (trx) {
        db.schema.hasTable("roles").then(function (isExist) {
            if (isExist)
                return;
            db.schema.createTable("roles", function (newTable) {
                newTable.increments("id");
                newTable.string("name");
                newTable.string("description");
            }).then(function () {
                db.schema.hasTable("users").then(function (isExist) {
                    if (isExist)
                        return;
                    db.schema.createTable("users", function (newTable) {
                        newTable.increments("id");
                        newTable.string("name");
                        newTable.string("description");
                        newTable.string("password");
                        newTable.integer("role").unsigned();
                        newTable.foreign("role").references("id").inTable("roles");
                    }).then(function () { return trx.commit(); });
                });
            });
        });
    }).then(function (res) {
        db.transaction(function (trx) {
            createCustomTablesIfNotExist(db, trx);
        }).then(function (res) {
            //populateDatabaseWithData(db)
        });
    });
    return db;
}

function connectDatabase() {
    return knex({
        client: database.driver,
        version: database.version,
        connection: {
            host: database.host,
            user: database.user,
            password: database.password,
            database: database.database
        }
    });
}
function initalizeDatabase() {
    var db = connectDatabase();
    db = createTablesIfNotExist(db);
}

initalizeDatabase();
var app = express();
//app.use(jwt({ secret: "lol" }).unless({ path: ["/auth"] }));
app.use("/api/get", graphql$1({
    schema: graphql.buildSchema("\n        type Query {\n            hello: String\n        }\n    "),
    graphiql: true,
    rootValue: {
        hello: function () { return "Hello world"; }
    }
}));
app.listen(3000, function () {
    console.log("ðŸš€ Listening...");
});

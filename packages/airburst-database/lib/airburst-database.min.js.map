{"version":3,"file":"airburst-database.min.js","sources":["../src/airburst-create-database.ts","../src/airburst-database.ts","../src/airburst-sample-database.ts","../src/airburst-hook-database.ts"],"sourcesContent":["import knex from \"knex\";\r\n\r\ntype DataType = \"increment\" | \"string\" | \"integer\" | \"date\" | \"uinteger\" | \"text\" | \"boolean\";\r\n\r\nexport type Column = {\r\n    type?: \"primary\" | \"unique\",\r\n    data: DataType,\r\n    ref?: {\r\n        table: string,\r\n        column: string;\r\n    }\r\n} | DataType;\r\n\r\nexport function createTableIfNoExist(db: knex<any, unknown[]>, name: string, callback: (newTable: knex.TableBuilder) => void) {\r\n    return new Promise((resolve, reject) => {\r\n        db.schema.hasTable(name).then(isExist => {\r\n            if(isExist) return resolve(\"Table already exist\");\r\n            db.schema.createTable(name, newTable => callback(newTable)).then(() => {\r\n                resolve(\"Table created\")\r\n            });\r\n        })\r\n    }) as Promise<string>\r\n}\r\n\r\nexport function createColumnsIfNoExist(table: knex.TableBuilder, name: string, column: Column) {\r\n    if(typeof column == \"string\")\r\n        return addColumnByType(table, name, column);\r\n    \r\n    let col = addColumnByType(table, name, column.data);\r\n    \r\n    if(column.type && column.type == \"primary\") {\r\n        col = col.primary();\r\n    } else if(column.type && column.type == \"unique\") {\r\n        col = col.unique();\r\n    }\r\n\r\n    if(column.ref) {\r\n        table.foreign(name).references(column.ref.column).inTable(column.ref.table)\r\n    }\r\n}\r\n\r\nfunction addColumnByType(table: knex.TableBuilder, name: string, type: DataType) {\r\n    switch(type) {\r\n        case \"increment\": return table.increments(name);\r\n        case \"boolean\": return table.boolean(name);\r\n        case \"integer\": return table.integer(name);\r\n        case \"string\": return table.string(name);\r\n        case \"text\": return table.text(name);\r\n        case \"date\": return table.date(name);\r\n        case \"uinteger\": return table.integer(name).unsigned();\r\n        default: return table.string(name)\r\n    }\r\n}","import knex from \"knex\";\r\nimport { createTableIfNoExist, Column, createColumnsIfNoExist } from \"./airburst-create-database\";\r\n\r\ninterface IDatabase {\r\n    [x: string]: {\r\n        [x: string] : Column\r\n    }\r\n}\r\n\r\nexport interface ISample {\r\n    table: string;\r\n    data: {[x: string]: string | null}[]\r\n}\r\n\r\nexport async function createNewDatabase(db: knex<any, unknown[]>, databaseJSON: IDatabase) {\r\n    await createTableIfNoExist(db, \"roles\", newTable => {\r\n        newTable.increments(\"id\");\r\n        newTable.string(\"name\");\r\n        newTable.string(\"description\");\r\n        newTable.integer(\"weight\").unsigned();\r\n    });\r\n    await createTableIfNoExist(db, \"users\", newTable => {\r\n        newTable.increments(\"id\");\r\n        newTable.string(\"name\");\r\n        newTable.string(\"password\");\r\n        newTable.string(\"description\");\r\n        newTable.integer(\"role_id\").unsigned();\r\n        newTable.foreign(\"role_id\").references(\"id\").inTable(\"roles\");       \r\n    });\r\n    await asyncForEachCustomTables(db, Object.entries(databaseJSON))\r\n}\r\n\r\nasync function asyncForEachCustomTables(db: knex<any, unknown[]>, entries: [string, { [x: string]: Column; }][]) {\r\n        for(let i = 0; i < entries.length; i++) {\r\n            const [key, value] = entries[i];\r\n            await createTableIfNoExist(db, key, newTable => {\r\n                Object.keys(value).forEach((column) => {\r\n                    createColumnsIfNoExist(newTable, column, value[column])\r\n                })\r\n            });\r\n        }\r\n}\r\n\r\n\r\n","import knex from \"knex\";\r\nimport sha256 from 'crypto-js/sha256';\r\nimport { ISample } from \"./airburst-database\";\r\n\r\nexport async function generateSampleDatabase(db: knex<any, unknown[]>, sample: ISample[]) {\r\n    await populateDefaultSampleData(db);\r\n    sample.forEach(async (singleSample) => {\r\n        await populateCustomSampleData(db, singleSample);\r\n    });\r\n}\r\n\r\nasync function populateDefaultSampleData(db: knex<any, unknown[]>) {\r\n    const rolesLength = (await db(\"roles\")).length;\r\n    const usersLength = (await db(\"users\")).length;\r\n    if (rolesLength == 0) {\r\n        db(\"roles\").insert([\r\n            {\r\n                name: \"Administrator\",\r\n                description: \"Administrator Role\",\r\n                weight: 4\r\n            },\r\n            {\r\n                name: \"Editor\",\r\n                description: \"Editor Role\",\r\n                weight: 3\r\n            },\r\n            {\r\n                name: \"Moderator\",\r\n                description: \"Moderator Role\",\r\n                weight: 2\r\n            },\r\n            {\r\n                name: \"User\",\r\n                description: \"User Role\",\r\n                weight: 1\r\n            }\r\n        ]).then();\r\n    }\r\n    if (usersLength == 0) {\r\n        db(\"users\").insert({\r\n            name: \"admin\",\r\n            password: sha256(\"admin\").toString(),\r\n            description: \"Content Administrator\",\r\n            role_id: 1\r\n        }).then();\r\n    }\r\n}\r\n\r\nasync function populateCustomSampleData(db: knex<any, unknown[]>, sample: ISample) {\r\n    const rowLength = (await db(sample.table)).length;\r\n    if (rowLength > 0)\r\n        return;\r\n    const data = sample.data.map((singleData) => {\r\n        return singleData;\r\n    });\r\n    db(sample.table).insert([...data]).then();\r\n}\r\n","import knex from \"knex\";\r\n\r\nexport async function getTablesName(db: knex<any, unknown[]>, driver: string) {\r\n    return await getSQLTable(db, driver);\r\n}\r\n\r\nasync function getSQLTable(db: knex<any, unknown[]>, driver: string) {\r\n    switch(driver) {\r\n        case \"mssql\": return await db.raw('select table_name from information_schema.tables where table_schema = \\'public\\' and table_catalog = ?');\r\n        case \"mysql\": return await db.raw(\"select table_name from information_schema.tables where table_schema = ?\");\r\n        case \"sqlite3\": return await db.raw(\"SELECT name FROM sqlite_master WHERE type='table';\");\r\n        case \"postgres\": return await db.raw(\"select table_name from information_schema.tables where table_schema = \\'public\\' and table_catalog = ?\");\r\n        case \"oracle\": return await db.raw(\"select table_name from user_tables\");\r\n    }\r\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAagB,oBAAoB,CAAC,EAAwB,EAAE,IAAY,EAAE,QAA+C;IACxH,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC/B,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YACjC,IAAG,OAAO;gBAAE,OAAO,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAClD,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,GAAA,CAAC,CAAC,IAAI,CAAC;gBAC7D,OAAO,CAAC,eAAe,CAAC,CAAA;aAC3B,CAAC,CAAC;SACN,CAAC,CAAA;KACL,CAAoB,CAAA;AACzB,CAAC;SAEe,sBAAsB,CAAC,KAAwB,EAAE,IAAY,EAAE,MAAc;IACzF,IAAG,OAAO,MAAM,IAAI,QAAQ;QACxB,OAAO,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAEhD,IAAI,GAAG,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;IAEpD,IAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,SAAS,EAAE;QACxC,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;KACvB;SAAM,IAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE;QAC9C,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;KACtB;IAED,IAAG,MAAM,CAAC,GAAG,EAAE;QACX,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;KAC9E;AACL,CAAC;AAED,SAAS,eAAe,CAAC,KAAwB,EAAE,IAAY,EAAE,IAAc;IAC3E,QAAO,IAAI;QACP,KAAK,WAAW,EAAE,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChD,KAAK,SAAS,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,KAAK,SAAS,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,KAAK,QAAQ,EAAE,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,KAAK,MAAM,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,KAAK,MAAM,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,KAAK,UAAU,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;QACvD,SAAS,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;KACrC;AACL;;SCtCsB,iBAAiB,CAAC,EAAwB,EAAE,YAAuB;;;;wBACrF,qBAAM,oBAAoB,CAAC,EAAE,EAAE,OAAO,EAAE,UAAA,QAAQ;wBAC5C,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC1B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACxB,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;wBAC/B,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;qBACzC,CAAC,EAAA;;oBALF,SAKE,CAAC;oBACH,qBAAM,oBAAoB,CAAC,EAAE,EAAE,OAAO,EAAE,UAAA,QAAQ;4BAC5C,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC1B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;4BACxB,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;4BAC5B,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;4BAC/B,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;4BACvC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;yBACjE,CAAC,EAAA;;oBAPF,SAOE,CAAC;oBACH,qBAAM,wBAAwB,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAA;;oBAAhE,SAAgE,CAAA;;;;;CACnE;AAED,SAAe,wBAAwB,CAAC,EAAwB,EAAE,OAA6C;;;;;;wCAC/F,CAAC;;;;;oCACC,KAAe,OAAO,CAAC,CAAC,CAAC,EAAxB,GAAG,QAAA,EAAE,KAAK,QAAA,CAAe;oCAChC,qBAAM,oBAAoB,CAAC,EAAE,EAAE,GAAG,EAAE,UAAA,QAAQ;4CACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;gDAC9B,sBAAsB,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;6CAC1D,CAAC,CAAA;yCACL,CAAC,EAAA;;oCAJF,SAIE,CAAC;;;;;oBANC,CAAC,GAAG,CAAC;;;0BAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAA;kDAAzB,CAAC;;;;;oBAA0B,CAAC,EAAE,CAAA;;;;;;;;SC7BxB,sBAAsB,CAAC,EAAwB,EAAE,MAAiB;;;;;wBACpF,qBAAM,yBAAyB,CAAC,EAAE,CAAC,EAAA;;oBAAnC,SAAmC,CAAC;oBACpC,MAAM,CAAC,OAAO,CAAC,UAAO,YAAY;;;wCAC9B,qBAAM,wBAAwB,CAAC,EAAE,EAAE,YAAY,CAAC,EAAA;;oCAAhD,SAAgD,CAAC;;;;yBACpD,CAAC,CAAC;;;;;CACN;AAED,SAAe,yBAAyB,CAAC,EAAwB;;;;;wBACxC,qBAAM,EAAE,CAAC,OAAO,CAAC,EAAA;;oBAAhC,WAAW,GAAG,CAAC,SAAiB,EAAE,MAAM;oBACzB,qBAAM,EAAE,CAAC,OAAO,CAAC,EAAA;;oBAAhC,WAAW,GAAG,CAAC,SAAiB,EAAE,MAAM;oBAC9C,IAAI,WAAW,IAAI,CAAC,EAAE;wBAClB,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;4BACf;gCACI,IAAI,EAAE,eAAe;gCACrB,WAAW,EAAE,oBAAoB;gCACjC,MAAM,EAAE,CAAC;6BACZ;4BACD;gCACI,IAAI,EAAE,QAAQ;gCACd,WAAW,EAAE,aAAa;gCAC1B,MAAM,EAAE,CAAC;6BACZ;4BACD;gCACI,IAAI,EAAE,WAAW;gCACjB,WAAW,EAAE,gBAAgB;gCAC7B,MAAM,EAAE,CAAC;6BACZ;4BACD;gCACI,IAAI,EAAE,MAAM;gCACZ,WAAW,EAAE,WAAW;gCACxB,MAAM,EAAE,CAAC;6BACZ;yBACJ,CAAC,CAAC,IAAI,EAAE,CAAC;qBACb;oBACD,IAAI,WAAW,IAAI,CAAC,EAAE;wBAClB,EAAE,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;4BACf,IAAI,EAAE,OAAO;4BACb,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC,QAAQ,EAAE;4BACpC,WAAW,EAAE,uBAAuB;4BACpC,OAAO,EAAE,CAAC;yBACb,CAAC,CAAC,IAAI,EAAE,CAAC;qBACb;;;;;CACJ;AAED,SAAe,wBAAwB,CAAC,EAAwB,EAAE,MAAe;;;;;wBAC1D,qBAAM,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,EAAA;;oBAAnC,SAAS,GAAG,CAAC,SAAsB,EAAE,MAAM;oBACjD,IAAI,SAAS,GAAG,CAAC;wBACb,sBAAO;oBACL,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,UAAC,UAAU;wBACpC,OAAO,UAAU,CAAC;qBACrB,CAAC,CAAC;oBACH,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,MAAM,gBAAK,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;;;;;;;SCrDxB,aAAa,CAAC,EAAwB,EAAE,MAAc;;;;wBACjE,qBAAM,WAAW,CAAC,EAAE,EAAE,MAAM,CAAC,EAAA;wBAApC,sBAAO,SAA6B,EAAC;;;;CACxC;AAED,SAAe,WAAW,CAAC,EAAwB,EAAE,MAAc;;;;;;oBACxD,KAAA,MAAM,CAAA;;6BACJ,OAAO,EAAP,wBAAO;6BACP,OAAO,EAAP,wBAAO;6BACP,SAAS,EAAT,wBAAS;6BACT,UAAU,EAAV,wBAAU;6BACV,QAAQ,EAAR,wBAAQ;;;wBAJQ,qBAAM,EAAE,CAAC,GAAG,CAAC,wGAAwG,CAAC,EAAA;wBAA7H,sBAAO,SAAsH,EAAC;wBACvH,qBAAM,EAAE,CAAC,GAAG,CAAC,yEAAyE,CAAC,EAAA;wBAA9F,sBAAO,SAAuF,EAAC;wBACtF,qBAAM,EAAE,CAAC,GAAG,CAAC,oDAAoD,CAAC,EAAA;wBAAzE,sBAAO,SAAkE,EAAC;wBAClE,qBAAM,EAAE,CAAC,GAAG,CAAC,wGAAwG,CAAC,EAAA;wBAA7H,sBAAO,SAAsH,EAAC;wBACzH,qBAAM,EAAE,CAAC,GAAG,CAAC,oCAAoC,CAAC,EAAA;yBAAzD,sBAAO,SAAkD,EAAC;;;;;;;;;"}
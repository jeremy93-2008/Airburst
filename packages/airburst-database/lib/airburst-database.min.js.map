{"version":3,"file":"airburst-database.min.js","sources":["../src/airburst-create-database.ts","../src/airburst-database.ts"],"sourcesContent":["import knex from \"knex\";\r\n\r\ntype DataType = \"increment\" | \"string\" | \"integer\" | \"uinteger\" | \"text\" | \"boolean\";\r\n\r\nexport type Column = {\r\n    type?: \"primary\" | \"unique\",\r\n    data: DataType,\r\n    ref?: {\r\n        table: string,\r\n        column: string;\r\n    }\r\n} | DataType;\r\n\r\nexport function createTableIfNoExist(db: knex<any, unknown[]>, name: string, callback: (newTable: knex.TableBuilder) => void) {\r\n    return new Promise((resolve, reject) => {\r\n        db.schema.hasTable(name).then(isExist => {\r\n            if(isExist) return resolve(\"Table already exist\");\r\n            db.schema.createTable(name, newTable => callback(newTable)).then(() => {\r\n                resolve(\"Table created\")\r\n            });\r\n        })\r\n    }) as Promise<string>\r\n}\r\n\r\nexport function createColumnsIfNoExist(table: knex.TableBuilder, name: string, column: Column) {\r\n    if(typeof column == \"string\")\r\n        return addColumnByType(table, name, column);\r\n    \r\n    let col = addColumnByType(table, name, column.data);\r\n    \r\n    if(column.type && column.type == \"primary\") {\r\n        col = col.primary();\r\n    } else if(column.type && column.type == \"unique\") {\r\n        col = col.unique();\r\n    }\r\n\r\n    if(column.ref) {\r\n        table.foreign(name).references(column.ref.column).inTable(column.ref.table)\r\n    }\r\n}\r\n\r\nfunction addColumnByType(table: knex.TableBuilder, name: string, type: DataType) {\r\n    switch(type) {\r\n        case \"increment\": return table.increments(name);\r\n        case \"boolean\": return table.boolean(name);\r\n        case \"integer\": return table.integer(name);\r\n        case \"string\": return table.string(name);\r\n        case \"text\": return table.text(name);\r\n        case \"uinteger\": return table.integer(name).unsigned();\r\n    }\r\n}","import knex from \"knex\";\r\nimport Bookshelf from \"bookshelf\";\r\nimport { createTableIfNoExist, Column, createColumnsIfNoExist } from \"./airburst-create-database\";\r\n\r\ninterface IDatabase {\r\n    [x: string]: {\r\n        [x: string] : Column\r\n    }\r\n}\r\n\r\nexport async function createNewDatabase(db: knex<any, unknown[]>, databaseJSON: IDatabase) {\r\n    await createTableIfNoExist(db, \"roles\", newTable => {\r\n        newTable.increments(\"id\");\r\n        newTable.string(\"name\");\r\n        newTable.string(\"description\");\r\n    });\r\n    await createTableIfNoExist(db, \"users\", newTable => {\r\n        newTable.increments(\"id\");\r\n        newTable.string(\"name\");\r\n        newTable.string(\"password\");\r\n        newTable.string(\"description\");\r\n        newTable.integer(\"role_id\").unsigned();\r\n        newTable.foreign(\"role_id\").references(\"id\").inTable(\"roles\");       \r\n    });\r\n    await asyncForEach(db, Object.entries(databaseJSON))\r\n}\r\n\r\nasync function asyncForEach(db: knex<any, unknown[]>, entries: [string, { [x: string]: Column; }][]) {\r\n        for(let i = 0; i < entries.length; i++) {\r\n            const [key, value] = entries[i];\r\n            await createTableIfNoExist(db, key, newTable => {\r\n                Object.keys(value).forEach((column) => {\r\n                    createColumnsIfNoExist(newTable, column, value[column])\r\n                })\r\n            });\r\n        }\r\n}\r\n\r\nexport function getDatabaseObject(db: knex<any,any>) {\r\n    \r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;SAagB,oBAAoB,CAAC,EAAwB,EAAE,IAAY,EAAE,QAA+C;IACxH,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;QAC/B,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,UAAA,OAAO;YACjC,IAAG,OAAO;gBAAE,OAAO,OAAO,CAAC,qBAAqB,CAAC,CAAC;YAClD,EAAE,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,QAAQ,CAAC,GAAA,CAAC,CAAC,IAAI,CAAC;gBAC7D,OAAO,CAAC,eAAe,CAAC,CAAA;aAC3B,CAAC,CAAC;SACN,CAAC,CAAA;KACL,CAAoB,CAAA;AACzB,CAAC;SAEe,sBAAsB,CAAC,KAAwB,EAAE,IAAY,EAAE,MAAc;IACzF,IAAG,OAAO,MAAM,IAAI,QAAQ;QACxB,OAAO,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC;IAEhD,IAAI,GAAG,GAAG,eAAe,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;IAEpD,IAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,SAAS,EAAE;QACxC,GAAG,GAAG,GAAG,CAAC,OAAO,EAAE,CAAC;KACvB;SAAM,IAAG,MAAM,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,IAAI,QAAQ,EAAE;QAC9C,GAAG,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC;KACtB;IAED,IAAG,MAAM,CAAC,GAAG,EAAE;QACX,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;KAC9E;AACL,CAAC;AAED,SAAS,eAAe,CAAC,KAAwB,EAAE,IAAY,EAAE,IAAc;IAC3E,QAAO,IAAI;QACP,KAAK,WAAW,EAAE,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAChD,KAAK,SAAS,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,KAAK,SAAS,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC3C,KAAK,QAAQ,EAAE,OAAO,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzC,KAAK,MAAM,EAAE,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrC,KAAK,UAAU,EAAE,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,QAAQ,EAAE,CAAC;KAC1D;AACL;;SCxCsB,iBAAiB,CAAC,EAAwB,EAAE,YAAuB;;;;wBACrF,qBAAM,oBAAoB,CAAC,EAAE,EAAE,OAAO,EAAE,UAAA,QAAQ;wBAC5C,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;wBAC1B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;wBACxB,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;qBAClC,CAAC,EAAA;;oBAJF,SAIE,CAAC;oBACH,qBAAM,oBAAoB,CAAC,EAAE,EAAE,OAAO,EAAE,UAAA,QAAQ;4BAC5C,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;4BAC1B,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;4BACxB,QAAQ,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;4BAC5B,QAAQ,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;4BAC/B,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,CAAC;4BACvC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;yBACjE,CAAC,EAAA;;oBAPF,SAOE,CAAC;oBACH,qBAAM,YAAY,CAAC,EAAE,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,EAAA;;oBAApD,SAAoD,CAAA;;;;;CACvD;AAED,SAAe,YAAY,CAAC,EAAwB,EAAE,OAA6C;;;;;;wCACnF,CAAC;;;;;oCACC,KAAe,OAAO,CAAC,CAAC,CAAC,EAAxB,GAAG,QAAA,EAAE,KAAK,QAAA,CAAe;oCAChC,qBAAM,oBAAoB,CAAC,EAAE,EAAE,GAAG,EAAE,UAAA,QAAQ;4CACxC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,UAAC,MAAM;gDAC9B,sBAAsB,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC,CAAA;6CAC1D,CAAC,CAAA;yCACL,CAAC,EAAA;;oCAJF,SAIE,CAAC;;;;;oBANC,CAAC,GAAG,CAAC;;;0BAAE,CAAC,GAAG,OAAO,CAAC,MAAM,CAAA;kDAAzB,CAAC;;;;;oBAA0B,CAAC,EAAE,CAAA;;;;;;CAQ7C;SAEe,iBAAiB,CAAC,EAAiB;AAEnD;;;;"}
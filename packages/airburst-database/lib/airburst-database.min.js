/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function createTableIfNoExist(db, name, callback) {
    return new Promise(function (resolve, reject) {
        db.schema.hasTable(name).then(function (isExist) {
            if (isExist)
                return resolve("Table already exist");
            db.schema.createTable(name, function (newTable) { return callback(newTable); }).then(function () {
                resolve("Table created");
            });
        });
    });
}
function createColumnsIfNoExist(table, name, column) {
    if (typeof column == "string")
        return addColumnByType(table, name, column);
    var col = addColumnByType(table, name, column.data);
    if (column.type && column.type == "primary") {
        col = col.primary();
    }
    else if (column.type && column.type == "unique") {
        col = col.unique();
    }
    if (column.ref) {
        table.foreign(name).references(column.ref.column).inTable(column.ref.table);
    }
}
function addColumnByType(table, name, type) {
    switch (type) {
        case "increment": return table.increments(name);
        case "boolean": return table.boolean(name);
        case "integer": return table.integer(name);
        case "string": return table.string(name);
        case "text": return table.text(name);
        case "uinteger": return table.integer(name).unsigned();
    }
}

function createNewDatabase(db, databaseJSON) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, createTableIfNoExist(db, "roles", function (newTable) {
                        newTable.increments("id");
                        newTable.string("name");
                        newTable.string("description");
                    })];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, createTableIfNoExist(db, "users", function (newTable) {
                            newTable.increments("id");
                            newTable.string("name");
                            newTable.string("password");
                            newTable.string("description");
                            newTable.integer("role_id").unsigned();
                            newTable.foreign("role_id").references("id").inTable("roles");
                        })];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, asyncForEach(db, Object.entries(databaseJSON))];
                case 3:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
function asyncForEach(db, entries) {
    return __awaiter(this, void 0, void 0, function () {
        var _loop_1, i;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _loop_1 = function (i) {
                        var _a, key, value;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    _a = entries[i], key = _a[0], value = _a[1];
                                    return [4 /*yield*/, createTableIfNoExist(db, key, function (newTable) {
                                            Object.keys(value).forEach(function (column) {
                                                createColumnsIfNoExist(newTable, column, value[column]);
                                            });
                                        })];
                                case 1:
                                    _b.sent();
                                    return [2 /*return*/];
                            }
                        });
                    };
                    i = 0;
                    _a.label = 1;
                case 1:
                    if (!(i < entries.length)) return [3 /*break*/, 4];
                    return [5 /*yield**/, _loop_1(i)];
                case 2:
                    _a.sent();
                    _a.label = 3;
                case 3:
                    i++;
                    return [3 /*break*/, 1];
                case 4: return [2 /*return*/];
            }
        });
    });
}
function getDatabaseObject(db) {
}

export { createNewDatabase, getDatabaseObject };
//# sourceMappingURL=airburst-database.min.js.map
